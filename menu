#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TAM_TEXTO 256

// Estrutura da Pergunta
typedef struct {
    char enunciado[TAM_TEXTO];
    char alternativas[4][TAM_TEXTO];
    char correta;
    int dificuldade;
} Pergunta;

// Lista dinâmica de perguntas
typedef struct {
    Pergunta* perguntas;
    int total;
} ListaPerguntas;

// Função para inicializar a lista
void inicializarLista(ListaPerguntas* lista) {
    lista->perguntas = NULL;
    lista->total = 0;
}

// Função para inserir nova pergunta
void inserirPergunta(ListaPerguntas* lista) {
    Pergunta nova;

    printf("Digite o enunciado da pergunta: ");
    getchar(); // limpar buffer
    fgets(nova.enunciado, TAM_TEXTO, stdin);
    nova.enunciado[strcspn(nova.enunciado, "\n")] = 0;

    for (int i = 0; i < 4; i++) {
        printf("Digite a alternativa %c: ", 'A' + i);
        fgets(nova.alternativas[i], TAM_TEXTO, stdin);
        nova.alternativas[i][strcspn(nova.alternativas[i], "\n")] = 0;
    }

    printf("Qual a letra da alternativa correta (A-D)? ");
    scanf(" %c", &nova.correta);

    printf("Qual o nível de dificuldade (1-Fácil, 2-Médio, 3-Difícil)? ");
    scanf("%d", &nova.dificuldade);

    // Redimensiona a lista
    lista->perguntas = realloc(lista->perguntas, (lista->total + 1) * sizeof(Pergunta));
    lista->perguntas[lista->total] = nova;
    lista->total++;

    printf("Pergunta adicionada com sucesso!\n");
}

// Função para listar todas as perguntas
void listarPerguntas(ListaPerguntas lista) {
    if (lista.total == 0) {
        printf("Nenhuma pergunta cadastrada.\n");
        return;
    }

    for (int i = 0; i < lista.total; i++) {
        printf("\nPergunta %d:\n", i + 1);
        printf("Enunciado: %s\n", lista.perguntas[i].enunciado);
        for (int j = 0; j < 4; j++) {
            printf("Alternativa %c: %s\n", 'A' + j, lista.perguntas[i].alternativas[j]);
        }
        printf("Correta: %c\n", lista.perguntas[i].correta);
        printf("Dificuldade: %d\n", lista.perguntas[i].dificuldade);
    }
}

// Pesquisar pergunta por palavra-chave no enunciado
void pesquisarPergunta(ListaPerguntas lista) {
    char palavra[TAM_TEXTO];
    printf("Digite uma palavra-chave para buscar: ");
    getchar();
    fgets(palavra, TAM_TEXTO, stdin);
    palavra[strcspn(palavra, "\n")] = 0;

    int achou = 0;
    for (int i = 0; i < lista.total; i++) {
        if (strstr(lista.perguntas[i].enunciado, palavra)) {
            printf("\nEncontrei na pergunta %d:\n", i + 1);
            printf("Enunciado: %s\n", lista.perguntas[i].enunciado);
            achou = 1;
        }
    }
    if (!achou) {
        printf("Nenhuma pergunta encontrada com essa palavra.\n");
    }
}

// Alterar uma pergunta
void alterarPergunta(ListaPerguntas* lista) {
    int indice;
    listarPerguntas(*lista);
    printf("\nDigite o número da pergunta que deseja alterar: ");
    scanf("%d", &indice);
    indice--;

    if (indice >= 0 && indice < lista->total) {
        printf("Alterando a pergunta %d:\n", indice + 1);
        inserirPergunta(lista); // vamos reaproveitar a função de inserção
        lista->perguntas[indice] = lista->perguntas[lista->total - 1];
        lista->total--; // remover o último (duplicado)
        lista->perguntas = realloc(lista->perguntas, lista->total * sizeof(Pergunta));
    } else {
        printf("Número inválido.\n");
    }
}

// Excluir uma pergunta
void excluirPergunta(ListaPerguntas* lista) {
    int indice;
    listarPerguntas(*lista);
    printf("\nDigite o número da pergunta que deseja excluir: ");
    scanf("%d", &indice);
    indice--;

    if (indice >= 0 && indice < lista->total) {
        for (int i = indice; i < lista->total - 1; i++) {
            lista->perguntas[i] = lista->perguntas[i + 1];
        }
        lista->total--;
        lista->perguntas = realloc(lista->perguntas, lista->total * sizeof(Pergunta));
        printf("Pergunta excluída com sucesso.\n");
    } else {
        printf("Número inválido.\n");
    }
}

// Menu principal
int main() {
    ListaPerguntas lista;
    inicializarLista(&lista);

    int opcao;
    do {
        printf("\n=== MENU ===\n");
        printf("1. Inserir pergunta\n");
        printf("2. Listar perguntas\n");
        printf("3. Pesquisar pergunta\n");
        printf("4. Alterar pergunta\n");
        printf("5. Excluir pergunta\n");
        printf("0. Sair\n");
        printf("Escolha: ");
        scanf("%d", &opcao);

        switch (opcao) {
            case 1: inserirPergunta(&lista); break;
            case 2: listarPerguntas(lista); break;
            case 3: pesquisarPergunta(lista); break;
            case 4: alterarPergunta(&lista); break;
            case 5: excluirPergunta(&lista); break;
            case 0: printf("Saindo...\n"); break;
            default: printf("Opção inválida.\n");
        }
    } while (opcao != 0);

    free(lista.perguntas); // liberar memória

    return 0;
}
