#include <stdio.h>
#include <stdlib.h>
#include <string.h>

//lista dinâmica de perguntas
typedef struct {
    Pergunta* perguntas;
    int total;
} ListaPerguntas;

//função para inicializar a lista
void inicializarLista(ListaPerguntas* lista) {
    lista->perguntas = NULL;
    lista->total = 0;
}

void inserirPergunta(ListaPerguntas* lista) {
    Pergunta nova;

    printf("Digite o enunciado da pergunta:\n");
    getchar(); // limpa o buffer de entrada
    nova.enunciado = lerTexto(); // usa malloc

    for (int i = 0; i < 4; i++) {
        printf("Digite a alternativa %c:\n", 'A' + i);
        nova.alternativas[i] = lerTexto(); // usa malloc
    }

    do {
        printf("Digite a letra da alternativa correta (A-D): ");
        scanf(" %c", &nova.correta);
        nova.correta = toupper(nova.correta);
    } while (nova.correta < 'A' || nova.correta > 'D');

    do {
        printf("Digite o nível de dificuldade (1-Muito Fácil, 2-Fácil, 3-Médio, 4-Difícil, 5-Muito Difícil): ");
        scanf("%d", &nova.dificuldade);
    } while (nova.dificuldade < 1 || nova.dificuldade > 5);

    // Adiciona ao final da lista
    lista->perguntas = realloc(lista->perguntas, (lista->total + 1) * sizeof(Pergunta));
    lista->perguntas[lista->total] = nova;
    lista->total++;

    printf("Pergunta inserida com sucesso!\n");
}

void listarPerguntas(ListaPerguntas lista) {

    if (lista.total == 0) {
        printf("Nenhuma pergunta cadastrada.\n");
        return;
    }

    for (int i = 0; i < lista.total; i++) {
        printf("\nPergunta %d:\n", i + 1);
        printf("Enunciado: %s\n", lista.perguntas[i].enunciado);
        for (int j = 0; j < 4; j++) {
            printf("Alternativa %c: %s\n", 'A' + j, lista.perguntas[i].alternativas[j]);
        }
        printf("Correta: %c\n", lista.perguntas[i].correta);

        // Mostrar dificuldade como texto
        const char* niveis[] = {
            "Muito Fácil", "Fácil", "Médio", "Difícil", "Muito Difícil"
        };
        int dif = lista.perguntas[i].dificuldade;
        if (dif >= 1 && dif <= 5) {
            printf("Dificuldade: %s\n", niveis[dif - 1]);
        } else {
            printf("Dificuldade: desconhecida (%d)\n", dif);
        }
    }
}

// Pesquisar pergunta
void pesquisarPergunta(ListaPerguntas lista) {
    char palavra[100];
    int encontrado = 0;

    printf("Digite uma palavra-chave para buscar no enunciado: ");
    getchar();
    fgets(palavra, sizeof(palavra), stdin);
    palavra[strcspn(palavra, "\n")] = 0;

    for (int i = 0; i < lista.total; i++) {
        if (strstr(lista.perguntas[i].enunciado, palavra)) {
            printf("\nEncontrada na pergunta %d:\n", i + 1);
            printf("Enunciado: %s\n", lista.perguntas[i].enunciado);
            encontrado = 1;
        }
    }

    if (!encontrado)
        printf("Nenhuma pergunta encontrada com essa palavra.\n");
}

// Alterar uma pergunta
void alterarPergunta(ListaPerguntas* lista) {

    int indice;
    listarPerguntas(*lista);
    printf("\nDigite o número da pergunta que deseja alterar: ");
    scanf("%d", &indice);
    indice--;

    if (indice >= 0 && indice < lista->total) {
        printf("Alterando a pergunta %d:\n", indice + 1);
        inserirPergunta(lista); // vamos reaproveitar a função de inserção
        lista->perguntas[indice] = lista->perguntas[lista->total - 1];
        lista->total--; //remove o último (duplicado)
        lista->perguntas = realloc(lista->perguntas, lista->total * sizeof(Pergunta));
    } else {
        printf("Número inválido.\n");
    }
}

// Excluir uma pergunta
void excluirPergunta(ListaPerguntas* lista) {
    
    int indice;
    listarPerguntas(*lista);
    printf("\nDigite o número da pergunta que deseja excluir: ");
    scanf("%d", &indice);
    indice--;

    if (indice >= 0 && indice < lista->total) {
        for (int i = indice; i < lista->total - 1; i++) {
            lista->perguntas[i] = lista->perguntas[i + 1];
        }
        lista->total--;
        lista->perguntas = realloc(lista->perguntas, lista->total * sizeof(Pergunta));
        printf("Pergunta excluída com sucesso.\n");
    } else {
        printf("Número inválido.\n");
    }
}

int main(){

    ListaPerguntas lista;
    inicializarLista(&lista);

    int opcao;

    do {
        printf("\n----- MENU -----\n");
        printf("1. Inserir pergunta\n");
        printf("2. Listar perguntas\n");
        printf("3. Pesquisar pergunta\n");
        printf("4. Alterar pergunta\n");
        printf("5. Excluir pergunta\n");
        printf("0. Sair\n");
        printf("Escolha uma opcao: ");
        scanf("%d", &opcao);

        switch (opcao) {
            case 1: inserirPergunta(&lista); break;
            case 2: listarPerguntas(lista); break;
            case 3: pesquisarPergunta(lista); break;
            case 4: alterarPergunta(&lista); break;
            case 5: excluirPergunta(&lista); break;
            case 0: printf("Saindo...\n"); break;
            default: printf("Opção inválida.\n");
        }
    } while (opcao != 0);

    free(lista.perguntas); //libera memória

    return 0;
}//main
